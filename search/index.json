[{"content":"时间 2024年11月9日14:53:19\n题目 C++ 1 18. 四数之和 法一、相向指针法 思路和 15. 三数之和 一样，排序后，枚举 nums[a] 作为第一个数，枚举 nums[b] 作为第二个数，那么问题变成找到另外两个数，使得这四个数的和等于 target，这可以用双指针解决。\n优化思路也和视频中讲的一样，对于 nums[a] 的枚举：\n设 s=nums[a]+nums[a+1]+nums[a+2]+nums[a+3]。如果 s\u0026gt;target，由于数组已经排序，后面无论怎么选，选出的四个数的和不会比 s 还小，所以后面不会找到等于 target 的四数之和了。所以只要 s\u0026gt;target，就可以直接 break 外层循环了。 设 s=nums[a]+nums[n−3]+nums[n−2]+nums[n−1]。如果 s\u0026lt;target，由于数组已经排序，nums[a] 加上后面任意三个数都不会超过 s，所以无法在后面找到另外三个数与 nums[a] 相加等于 target。但是后面还有更大的 nums[a]，可能出现四数之和等于 target 的情况，所以还需要继续枚举，continue 外层循环。 如果 a\u0026gt;0 且 nums[a]=nums[a−1]，那么 nums[a] 和后面数字相加的结果，必然在之前算出过，所以无需执行后续代码，直接 continue 外层循环。（可以放在循环开头判断。） 对于 nums[b] 的枚举（b 从 a+1 开始），也同样有类似优化：\n设 s=nums[a]+nums[b]+nums[b+1]+nums[b+2]。如果 s\u0026gt;target，由于数组已经排序，后面无论怎么选，选出的四个数的和不会比 s 还小，所以后面不会找到等于 target 的四数之和了。所以只要 s\u0026gt;target，就可以直接 break。 设 s=nums[a]+nums[b]+nums[n−2]+nums[n−1]。如果 s\u0026lt;target，由于数组已经排序，nums[a]+nums[b] 加上后面任意两个数都不会超过 s，所以无法在后面找到另外两个数与 nums[a] 和 nums[b] 相加等于 target。但是后面还有更大的 nums[b]，可能出现四数之和等于 target 的情况，所以还需要继续枚举，continue。 如果 b\u0026gt;a+1 且 nums[b]=nums[b−1]，那么 nums[b] 和后面数字相加的结果，必然在之前算出过，所以无需执行后续代码，直接 continue。注意这里 b\u0026gt;a+1 的判断是必须的，如果不判断，对于示例 2 这样的数据，会直接 continue，漏掉符合要求的答案。 对于 Java、C++ 等语言，注意相加结果可能会超过 32 位整数范围，需要用 64 位整数存储四数之和。\n链接：https://leetcode.cn/problems/4sum/solutions/2344514/ji-zhi-you-hua-ji-yu-san-shu-zhi-he-de-z-1f0b/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; fourSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { // abcd下标 【0,n】之间 // a!=b!=c!=d // sum = target std::sort(nums.begin(), nums.end()); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; if(nums.size() \u0026lt; 4) return res; int n = nums.size(); // a 控制最外层循环, d是第二层循环, 第三层循环是b和c for(long a = 0; a \u0026lt; nums.size() - 3; a++) { long long x = nums[a]; // 如果a不是第一个, 且前一位和后一位相同，直接跳过 if(a \u0026amp;\u0026amp; x == nums[a - 1]) continue; // 排序好之后不可能比这个更小了 if(x + nums[a + 1] + nums[a + 2] + nums[a + 3] \u0026gt; target) break; // 因为nums[a]可以增大,直接continue if(x + nums[n - 1] + nums[n - 2] + nums[n - 3] \u0026lt; target) continue; for(long b = a + 1; b \u0026lt; nums.size() - 2; b++) { int c = b + 1, d = n - 1; long long y = nums[b]; // 跳过重复数字 if(b \u0026gt; a + 1 \u0026amp;\u0026amp; y == nums[b - 1]) continue; // 与a同理, 同样考虑的是区间 if(x + y + nums[b + 1] + nums[b + 2] \u0026gt; target) break; if(x + y + nums[n - 1] + nums[n - 2] \u0026lt; target) continue; while(c \u0026lt; d) { int sum = nums[c] + nums[d] + x + y; if(sum \u0026lt; target) c++; else if(sum \u0026gt; target) d--; else { res.push_back({(int)x, (int)y, nums[c], nums[d]}); for(c++; c \u0026lt; d \u0026amp;\u0026amp; nums[c] == nums[c - 1]; c++); for(d--; c \u0026lt; d \u0026amp;\u0026amp; nums[d] == nums[d + 1]; d--); } } } } return res; } }; 一刷总结 最主要的是跳过，a和b分别控制这1和2层循环，第一层a如果碰到nums[a] == nums[a-1]的时候需要跳过，同理b 碰到nums[b] == nums[b - 1]时也要跳过，跳过的判定分别是a \u0026gt; 0, b \u0026gt; a + 1, b初始就是 a + 1。 然后最后一步d\u0026ndash;, c++，是因为那一轮判定已经是结束了，d在那个位置的答案已经出来了，所以d要移动，同理c一样。\n参考 https://leetcode.cn/circle/discuss/RvFUtj/\n","date":"2024-11-09T00:00:00Z","image":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%9818/bg1_hu7054862049472248261.png","permalink":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%9818/","title":"leetcode 两数之和专项（题18）"},{"content":"时间 2024年11月8日14:42:08\n题目 C++ 1 16. 最接近的三数之和 法一、暴力法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public: int countPairs(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { std::sort(nums.begin(), nums.end()); // 用二维数组收入元素， 然后返回一维数组的个数 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res_arr; for(int left = 0; left \u0026lt; nums.size(); left++) { for(int right = nums.size() - 1; right \u0026gt; left; right--){ if(nums[left] + nums[right] \u0026lt; target) res_arr.push_back({left, right}); } } return res_arr.size(); } }; 优化后 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public: int countPairs(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { // 不需要vector, 只要res就行 int res = 0; for(int left = 0; left \u0026lt; nums.size(); left++) { for(int right = nums.size() - 1; right \u0026gt; left; right--){ if(nums[left] + nums[right] \u0026lt; target) // res_arr.push_back({left, right}); res++; } } return res; } }; 法二、双指针法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public: int countPairs(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { // 先排序 std::sort(nums.begin(), nums.end()); int res = 0, left = 0, right = nums.size() - 1; while(right \u0026gt; left) { // 下标为left的值+下标为right的值 \u0026lt; target, 那就要思考加更大的值，由于right对应的值已经是最大了 // 那么就改动left, 那就是说【left+1, right】区间的值 + left对应的值都是 \u0026lt; target，那res就加上right - left跨度就行 if(nums[left] + nums[right] \u0026lt; target) { res += right - left; left++; } // 如果说下标为left的值+下标为right的值 \u0026gt;= target, 那就要思考加更小的值，由于left对应的值已经是最小了 // 那么就改动right, 现在在【left, right - 1】区间的值 和 right相加都是 \u0026gt; target, 所以right--就可以 else { right--; } } return res; } }; 参考 https://leetcode.cn/circle/discuss/RvFUtj/\n","date":"2024-11-08T00:00:00Z","image":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%982824/bg1_hu7054862049472248261.png","permalink":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%982824/","title":"leetcode 两数之和专项（题2824）"},{"content":"时间 2024年11月8日14:42:08\n题目 C++ 1 PAT A 1001 A+B Format 代码1，用控制符输出 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include\u0026lt;cstdio\u0026gt; int main() { int a, b, sum; scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b); sum = a + b; if(sum \u0026lt; 0) {//若和为负数，则先输出一个负号，然后取相反数用正数做接下来的运算 printf(\u0026#34;-\u0026#34;); sum *= -1; } //若和有7位数 if(sum \u0026gt;= 1000000) printf(\u0026#34;%d,%03d,%03d\u0026#34;, sum / 1000000, sum / 1000 % 1000, sum % 1000);//逗号之间的数不足3位要在左边用0补齐 //若和只有4到6位数 else if(sum \u0026gt;= 1000) printf(\u0026#34;%d,%03d\u0026#34;, sum / 1000,sum % 1000); //若和不足4位数 else printf(\u0026#34;%d\u0026#34;, sum); return 0; } 代码2 每隔开3位，插入\u0026rsquo;,\u0026rsquo;，从倒数第3位开始 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;sstream\u0026gt; // 用于字符串流操作 // 函数用于格式化数字，使其每三位数字用逗号分隔 std::string formatNumber(int number) { std::string result; bool isNegative = number \u0026lt; 0; number = std::abs(number); // 取绝对值以简化格式化 std::stringstream ss; ss \u0026lt;\u0026lt; number; // 将数字转换为字符串 // 从字符串的末尾开始，每三位添加一个逗号 std::string str = ss.str(); int length = str.length(); for (int i = length - 3; i \u0026gt; 0; i -= 3) { str.insert(i, \u0026#34;,\u0026#34;); } // 如果原始数字是负数，添加负号 if (isNegative) { result = \u0026#34;-\u0026#34; + str; } else { result = str; } return result; } int main() { int a, b; // 读取输入 std::cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; // 计算和 int sum = a + b; // 输出格式化后的和 std::cout \u0026lt;\u0026lt; formatNumber(sum) \u0026lt;\u0026lt; std::endl; return 0; } 一刷总结 以上两种方法都是先处理负号，第一种是先打印\u0026rsquo;-\u0026rsquo;，然后把数据变成正数，再通过·格式控制符·%3d打印数据，这是直接法。 %03d 0 - 不足3位前面补0 3 - 打印3位 d - 10进制 Decimal\n第二种方法，先判断正负，则是从字符串末尾每隔3位插入, 遍历到第二位（数据位），这样可以避免\u0026rsquo;-,1\u0026rsquo;这种情况发生，在最后输出\u0026rsquo;-\u0026rsquo; + 字符串即可。\n","date":"2024-11-08T00:00:00Z","image":"http://localhost:1313/p/pat-1001/bg1_hu1224270450914663382.png","permalink":"http://localhost:1313/p/pat-1001/","title":"PAT 1001"},{"content":"时间 2024年11月7日14:02:22\n题目 C++ 1 167. 两数之和 II - 输入有序数组 法一、哈希表法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public: vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; numbers, int target) { unordered_map\u0026lt;int, int\u0026gt; map; for(int i = 0; i \u0026lt; numbers.size(); i++) { auto it = map.find(target - numbers[i]); if(it != map.end()) { return {it-\u0026gt;second, i + 1}; } map[numbers[i]] = i + 1; } return {}; }; }; 法二、 相向指针法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public: // 1. 思路是取左右指针分别指向头和尾 // 2. 先进行排序（点睛之笔） // 3. 头 + 尾的值如果比target高, 则尾的index-- // 4. 同理： 头 + 尾的值如果比target低, 则头的index++ // 5. 相等则结束 vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; numbers, int target) { std::sort(numbers.begin(), numbers.end()); int left = 0, right = numbers.size() - 1; while(left != right) { if(numbers[left] + numbers[right] == target) return {left + 1, right + 1}; else if(numbers[left] + numbers[right] \u0026gt; target) right--; else{ left++; } } return {}; }; }; 参考 https://leetcode.cn/circle/discuss/RvFUtj/\n","date":"2024-11-07T00:00:00Z","image":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%98167/bg1_hu7054862049472248261.png","permalink":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%98167/","title":"leetcode 两数之和专项（题167）"},{"content":"时间 2024年11月6日12:58:19\n总题目 C++ 1 2 3 4 5 6 7 1. 两数之和 167. 两数之和 II - 输入有序数组 15. 三数之和 2824. 统计和小于目标的下标对数目 16. 最接近的三数之和 18. 四数之和 611. 有效三角形的个数 法一、 暴力双指针O(N^2) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public: vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int p, q; if(nums.size() \u0026lt;= 1) return {}; for(p = 0, q = p + 1; p != q; p++) { for(q = p + 1; q != nums.size(); q++) { if(nums[p] + nums[q] == target) return {p, q}; } } return {}; }; }; 法二、 哈希表(重点) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public: vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { unordered_map\u0026lt;int, int\u0026gt; hashtable; for (int i = 0; i \u0026lt; nums.size(); ++i) { // iterator find( const Key\u0026amp; key ); 返回一个迭代器 // 到哈希表内部查找 target - x，没有就把key和下标加入哈希表 auto it = hashtable.find(target - nums[i]); // 找到了 if (it != hashtable.end()) { return {it-\u0026gt;second, i}; } // 未找到, hashtable[nums[i]] -\u0026gt; key, i -\u0026gt; value // hashmap\u0026lt;key, value\u0026gt; hashmap-\u0026gt;key = value // 存的是下标 hashtable[nums[i]] = i; } return {}; } }; 参考 1 2 3 4 5 6 7 8 9 10 11 12 13 14 https://www.bilibili.com/video/BV1bP411c7oJ/ https://leetcode.cn/circle/discuss/RvFUtj/ 题目+题解汇总： https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/README.md 1. https://leetcode.cn/problems/two-sum/solutions/434597/liang-shu-zhi-he-by-leetcode-solution/ 2824. 统计和小于目标的下标对数目 https://leetcode.cn/problems/count-pairs-whose-sum-is-less-than-target/solution/onlogn-pai-xu-shuang-zhi-zhen-by-endless-qk40/ 16. 最接近的三数之和 https://leetcode.cn/problems/3sum-closest/solution/ji-zhi-you-hua-ji-yu-san-shu-zhi-he-de-z-qgqi/ 18. 四数之和 https://leetcode.cn/problems/4sum/solution/ji-zhi-you-hua-ji-yu-san-shu-zhi-he-de-z-1f0b/ 611. 有效三角形的个数 https://leetcode.cn/problems/valid-triangle-number/solution/zhuan-huan-cheng-abcyong-xiang-xiang-shu-1ex3/ ","date":"2024-11-06T00:00:00Z","image":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%981/bg1_hu7054862049472248261.png","permalink":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%981/","title":"leetcode 两数之和专项（题1）"},{"content":"时间 2024年11月6日12:58:19\n题目 C++ 1 15. 三数之和 法一、相向指针法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; threeSum(vector\u0026lt;int\u0026gt;\u0026amp; nums) { // i != j i != k j != k // nums[j] + nums[k] = -nums[i] std::sort(nums.begin(), nums.end()); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; for (int i = 0; i \u0026lt; nums.size() - 2; i++) { // i跳过重复数字，i\u0026amp;\u0026amp;不能丢掉，必须是i \u0026gt; 1才行 if (i \u0026amp;\u0026amp; nums[i] == nums[i - 1]) continue; if (nums[i] + nums[i + 1] + nums[i + 2] \u0026gt; 0) break; int j = i + 1, k = nums.size() - 1; while (j \u0026lt; k) { // 3个数和如果 \u0026gt; 0, k移位 if (nums[i] + nums[j] + nums[k] \u0026gt; 0) k--; // 3个数和如果 \u0026lt; 0, j移位 else if (nums[i] + nums[j] + nums[k] \u0026lt; 0) j++; else { // push_back之后j和k要移位，然后在最外层的for循环中重新赋值 res.push_back({ nums[i], nums[j], nums[k] }); for (j++; j \u0026lt; k \u0026amp;\u0026amp; nums[j] == nums[j - 1]; j++); // 跳过重复数字 for (k--; k \u0026gt; j \u0026amp;\u0026amp; nums[k] == nums[k + 1]; k--); // 跳过重复数字 } } } return res; } }; 参考 https://leetcode.cn/circle/discuss/RvFUtj/\n","date":"2024-11-06T00:00:00Z","image":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%9815/bg1_hu7054862049472248261.png","permalink":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%9815/","title":"leetcode 两数之和专项（题15）"},{"content":"时间 2024年11月8日14:30:02\n题目 C++ 1 16. 最接近的三数之和 相向指针法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #define MAX_SIZE 0x7fff0000 class Solution { public: int threeSumClosest(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { // [分析]：按照三数之和的过程, 定义三个指针ijk,三项之和返回的是元素值 // 这里只要返回结果就行 std::sort(nums.begin(), nums.end()); int res = MAX_SIZE; int min_diff(res); for(int i = 0; i \u0026lt; nums.size() - 2; i++) { // 还是老样子, j指向i后一位, k指向最后 int j = i + 1, k = nums.size() - 1; while(j \u0026lt; k) { int sum = nums[i] + nums[j] + nums[k]; if(sum == target) return sum; if(sum \u0026gt; target) { if((sum - target) \u0026lt; min_diff) { min_diff = sum - target; res = sum; } k--; } else { if((target - sum) \u0026lt; min_diff) { min_diff = target - sum; res = sum; } j++; } // if(abs(sum - target) \u0026lt; abs(res - target)) // res = sum; // j++; } } return res; } }; 代码对比 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int j = i + 1, k = nums.size() - 1; while(j \u0026lt; k) { int sum = nums[i] + nums[j] + nums[k]; if(sum == target) return sum; if(sum \u0026gt; target) { if((sum - target) \u0026lt; min_diff) { min_diff = sum - target; res = sum; } k--; } else { if((target - sum) \u0026lt; min_diff) { min_diff = target - sum; res = sum; } j++; } } 之所以选择上面这段而不是下面那段代码是因为下面没法知道要移动j还是k,会造成结果不准确，漏掉部分正确答案的问题。\n1 2 3 if(abs(sum - target) \u0026lt; abs(res - target)) res = sum; j++; 参考 https://leetcode.cn/circle/discuss/RvFUtj/\n","date":"2024-11-06T00:00:00Z","image":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%9816/bg1_hu7054862049472248261.png","permalink":"http://localhost:1313/p/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E4%B8%93%E9%A1%B9%E9%A2%9816/","title":"leetcode 两数之和专项（题16）"},{"content":"下载 进入官网 1 https://www.centos.org/ 如图： 点击CentOS Linux, 如图： 点击x86/64后，链接随便选一个 问题 1.虚拟机安装出现system not found 1 1. 打开虚拟机设置 -\u0026gt; 设备状态 -\u0026gt; 启动时连接 2.安装好后发现无法联网 配置 1 2 3 4 5 6 1. 进入root账号 2. 输入 `cd /etc/sysconfig/network-scripts` 3. 输入 `vi ifcfg-ens34` 4. 输入i, `ONBOOT=no`,改成 `ONBOOT=yes`, 输入`wq!` 5. 重启服务 `systemctl restart network` 6. 输入`ip addr` ","date":"2024-09-15T00:00:00Z","image":"http://localhost:1313/centos-config-install/background.png","permalink":"http://localhost:1313/p/centos%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/","title":"CentOS快速安装与简单配置"},{"content":"快速开始(win 下的安装） 1.安装node.js, 下载长期支持版本, 以下为网址: 1 http://nodejs.cn/download/ 2. 安装git，以下为网址: 1 https://git-scm.com/downloads 3. git配置 1 2 git config --global user.email \u0026#34;Your email\u0026#34; git config --global user.name \u0026#34;Your name\u0026#34; 4. 创建存放文件夹 such as \u0026ldquo;blog\u0026rdquo; 5. 打开cmd, 输入 1 hexo init 6. 进入github,创建仓库repository 7. 安装插件 1 cnpm install --save hexo-deployer-git 8. 更改配置文件_config.xml 1 2 3 4 5 6 # Deployment ## Docs: https://hexo.io/docs/one-command-deployment deploy: type: git repo: https://github.com/Githubname/Githubname.github.io.git branch: master 测试 1. 运行 1 hexo s 2. 创建博客 1 hexo n \u0026#34;My blog name\u0026#34; 3. 生成 1 hexo g 4. 运行服务 1 hexo server 5.部署 1 hexo deploy 遇到deloy错误的解决方案 1 OpenSSL SSL_read: Connection was reset, errno 10054 ... 1. 进入站点根目录删除.deploy_git文件夹(删除git提交内容文件夹） 2. 执行命令 1 2 3 4 git config --global http.sslVerify \u0026#34;false\u0026#34; git config --global core.autocrlf false ipconfig /flushdns hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d 经验： Hexo可能出现部分图片能加载成功，部分图片加载不出的情况 解决方案： 你可以看看是不是图片名称有重名，将图片名称更改至不重复的即可 ","date":"2024-09-14T00:00:00Z","image":"http://localhost:1313/p/hexo-install/hexo_hu3010963169690842117.jpg","permalink":"http://localhost:1313/p/hexo-install/","title":"hexo install"},{"content":"官方样本 1 https://demo.stack.jimmycai.com/ 快速安装 1. 进入网站, 选择Tags, 选择分支, 下载hugo_extended_0.xxx_windows-amd64.zip 1 2 比如： https://github.com/gohugoio/hugo/releases/tag/v0.134.2 2. 进入hugo网站下载组件, git/go 1 https://gohugo.io/getting-started/quick-start/ 3. 下载主题themes https://themes.gohugo.io/themes/hugo-theme-stack\nhttps://hugoloveit.com/zh-cn\n测试 1. 配置文件 1 2 3 4 hugo new site xxx cd xxx 将下载的主题放入themes，去hugo.yaml或者config.toml或者hugo.toml等文件中配置。 2.测试配置 1 hugo server -D 3. 创建内容 1 2 hugo new content post/xx.en.md 或者 hugo new content post/xx.zh-cn.md 4. 参考 https://letere-gzj.github.io/hugo-stack/p/hugo/custom-blog/\n5. git上传 1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main ","date":"2024-09-14T00:00:00Z","image":"http://localhost:1313/p/hugo-install/hugo_hu2547220593579345709.png","permalink":"http://localhost:1313/p/hugo-install/","title":"hugo install"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"http://localhost:1313/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu4699868770670889127.jpg","permalink":"http://localhost:1313/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"http://localhost:1313/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"http://localhost:1313/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"http://localhost:1313/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu10664154974910995856.jpg","permalink":"http://localhost:1313/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"http://localhost:1313/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"http://localhost:1313/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"http://localhost:1313/p/emoji-support/","title":"Emoji Support"}]